# TAS Container to Container 통신 & add-networking-policy script

## 1. networking-policy 사용 이유

- MSA 환경이나 Front-Back End가 분리되어 있는 환경에서 각 App의 내부 통신이 Internal Domain(apps.internal)으로 구성이 되어 있을 경우 내부에서 API 통신이 이루어지지 않습니다.
- Internal Domain(apps.internal)을 사용하게 되면 PAS Component의 Router -> App -> Router의 호출 단계가 Router -> App으로 줄어들어 효율성이 증가 됩니다.
- Internal Domain을 사용하는 Isolation Segment  경우 networking-policy을 걸어줘야 할 가능성이 있습니다.
- 내부적으로 App이 실행하는 Container의 IP example) 10.x.x.x에서 destination 대상에 대한 port forwarding, iptable, route table을 설정하는 것 같습니다.

- 참고 URL
	- [https://github.com/cloudfoundry/cf-networking-examples/blob/master/docs/c2c-no-service-discovery.md](https://github.com/cloudfoundry/cf-networking-examples/blob/master/docs/c2c-no-service-discovery.md)
	- [https://docs.pivotal.io/platform/application-service/2-7/concepts/understand-cf-networking.html](https://docs.pivotal.io/platform/application-service/2-7/concepts/understand-cf-networking.html)


## 2. Script File
- 대상 Org/Space에 Mapping 된 App이 PAS 전체 App에 대한 networking-policy가 설정 됩니다.

```
#!/bin/bash

##################################################################################################################################################

# USE: ./add_networking_policy.sh {SOURCE_ORG_NAME: cf org} {SOURCE_SPACE_NAME: cf space} {PROTOCOL: udp/tcp} {START PORT: 1024} {END PORT: 8080}}

# PARAM

# {1 SOURCE_ORG_NAME}: 적용 할 cf org name
# {2 SOURCE_SPACE_NAME}: 적용 할 cf space name
# {3 PROTOCOL}: protocol: upp/tcp 선택
# {4 START PORT}: port 시작점
# {5 END PORT}: port 끝점

# RESULT: cf add-network-policy $cf_source_apps_name --destination-app $cf_target_apps_name -s $cf_target_space_nam -o $cf_target_org_name --protocol $cf_protocal --PORT $cf_start_port - $cf_end_port

##################################################################################################################################################


cf_source_org_name=$1
cf_source_space_name=$2
cf_protocol=$3
cf_start_port=$4
cf_end_port=$5


cf target -o $cf_source_org_name -s $cf_source_space_name

cf_source_org_guid=$(cf org $cf_source_org_name --guid | tr -d '"')
cf_source_space_guid=$(cf space $cf_source_space_name --guid | tr -d '"')

cf_target_org_count=$(cf curl /v2/organizations | jq .total_results)
cf_source_apps_count=$(cf curl /v2/spaces/$cf_source_space_guid/apps | jq .total_pages)

m=1
while [ $m -le $cf_source_apps_count ]
    do
        cf_source_apps_names=$(cf curl /v2/spaces/$cf_source_space_guid/apps?page=$m | jq .resources[].entity.name |  tr -d '"')
        for cf_source_apps_name in $cf_source_apps_names; do

            i=0
            while [ $i -lt $cf_target_org_count ]
                do
                    cf_target_org_guid=$(cf curl /v2/organizations | jq .resources[$i].metadata.guid |  tr -d '"')
                    cf_target_org_name=$(cf curl /v2/organizations | jq .resources[$i].entity.name |  tr -d '"')
                    cf_target_space_count=$(cf curl /v2/organizations/$cf_target_org_guid/spaces | jq .total_results)
                    
                    j=0
                    while [ $j -lt $cf_target_space_count ]
                        do
                            cf_target_space_guid=$(cf curl /v2/organizations/$cf_target_org_guid/spaces | jq .resources[$j].metadata.guid | tr -d '"')
                            cf_target_space_name=$(cf curl /v2/organizations/$cf_target_org_guid/spaces | jq .resources[$j].entity.name | tr -d '"')
                            j=$(($j+1))
                            
                            cf_apps_target_count=$(cf curl /v2/spaces/$cf_target_space_guid/apps | jq .total_pages)
                            k=1
                            while [ $k -le $cf_source_apps_count ]
                            do
                                cf_target_apps_names=$(cf curl /v2/spaces/$cf_target_space_guid/apps?page=$k | jq .resources[].entity.name |  tr -d '"')
                                
                                for cf_target_apps_name in $cf_target_apps_names; do
                                    echo "source app name: $cf_source_apps_name ||||| target org name: $cf_target_org_name |||| target space name: $cf_target_space_name |||| target app name: $cf_target_apps_name |||| protocal: $cf_protocal |||| port range: $cf_start_port-$cf_end_port"
									cf add-network-policy $cf_source_apps_name --destination-app $cf_target_apps_name -o $cf_target_org_name -s $cf_target_space_name  --protocol $cf_protocol --port $cf_start_port-$cf_end_port
                                done
                                k=$(($k+1))
                            done
                            
                        done
            
                    i=$(($i+1))
                done
        done
        m=$(($m+1))
    done
```

## 3. Script 파일 설명
cf add-networing-policy 자동화 스크립트 파일과 함께 부연 설명을 드립니다.

- 스크립트 로직 설명

1) Bash Script에서 Org/Space/Protocal/PortRange를 파라미터로 받습니다.
2) Loof를 실행하며 파라미터로 받은 Org와 Space의 uuid 정보를 바탕으로 cf targeting과 해당 Org/Space가 가지고 있는 App Name을 추출합니다.
3) 4중 Loof를 실행하며 대상 Foundation의 모든 Org/Space/Appname을 추출 합니다.
4) 받아온 파라미터 값(procotol, port range) + 2) 실행 결과 값(Source App) + 3) 실행 결과 값(Destination App, Destination Org Name, Destination Space Name)을 결합하여 $ cf add-network-policy 명령어를 반복 수행 합니다.

- Script 실행 방법

```
./add_networking_policy.sh {SOURCE_ORG_NAME: test-org} {SOURCE_SPACE_NAME: test2} {PROTOCOL: udp/tcp} {START PORT: 1024} {END PORT: 8080}}

Example) ./add_networking_policy.sh test-org test-space tcp 1024 8080
```
 
- 결과 확인 방법


```
$ ubuntu@ubuntu:~$ cf network-policies
 Listing network policies in org test-org / space test-space as admin...

 source       destination                                           protocol   ports       destination space                      destination org
 front-test-app   p-invitations-green                                   tcp        1024-8080   system                                 system
 front-test-app   p-invitations-blue                                    tcp        1024-8080   system                                 system
 front-test-app   search-server-green                                   tcp        1024-8080   system                                 system
 front-test-app   search-server-blue                                    tcp        1024-8080   system                                 system
 front-test-app   app-usage-scheduler-venerable                         tcp        1024-8080   system                                 system
 front-test-app   app-usage-worker-venerable                            tcp        1024-8080   system                                 system

.... 생략
```
